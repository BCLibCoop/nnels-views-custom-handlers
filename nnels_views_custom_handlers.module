<?php

/**
 * Implements hook_views_api().
 */
function nnels_views_custom_handlers_views_api() {
  return [
    'api' => 3,
  ];
}

/**
 * Implements hook_views_post_execute().
 */
function nnels_views_custom_handlers_views_post_execute(&$view) {

  // Bookshelf Remove Field.
  if (isset($view->field['bookshelf_remove'])) {
    _nnels_views_custom_handlers_set_bookshelf_remove_field($view);
  }

  // Duplicate S3 Field.
  if (isset($view->field['duplicate_s3'])) {
    _nnels_views_custom_handlers_set_duplicate_s3_field($view);
  }

  // File Size Warning Field.
  if (isset($view->field['file_size_warning'])) {
    _nnels_views_custom_handlers_set_file_size_warning_field($view);
  }

  // S3 Path Field.
  if (isset($view->field['s3_path'])) {
    _nnels_views_custom_handlers_set_s3_path_field($view);
  }
  if (isset($view->filter['s3_path'])) {
    _nnels_views_custom_handlers_apply_s3_path_filter($view);
  }
}

/**
 * Apply S3 Path Filter.
 *
 * @param object $view
 */
function _nnels_views_custom_handlers_apply_s3_path_filter(&$view) {
  $pattern = $view->filter['s3_path']->options['pattern'];

  // Gather file nodes so they can be loaded all at once.
  $nids = array();
  foreach ($view->result as $result) {
    if (isset($view->field['field_s3_path']) && isset($result->{$view->field['field_s3_path']->field_alias})) {
      $nids[$result->{$view->field['field_s3_path']->field_alias}] = TRUE;
    }
    // The S3 path filter is dependant on the field_s3_path field. If the
    // field_s3_path field is not present, display some warning text so the
    // admin can fix it.
    else {
      drupal_set_message("'Field: S3 Path' field is missing and is required!");
    }
  }

  // All of these nodes should already be loaded in static memory and should
  // add a very minimal amount of processing time.
  $nodes = node_load_multiple(array_keys($nids));

  // Filter the results.
  foreach ($view->result as $index => $result) {
    if (isset($view->field['field_s3_path']) && isset($result->{$view->field['field_s3_path']->field_alias})) {
      $node = $nodes[$result->{$view->field['field_s3_path']->field_alias}];
      $s3_path = field_get_items('node', $node, 'field_s3_path');
      if ($s3_path) {
        if (preg_match('/' . $pattern . '/', $s3_path[0]['value'])) {
          unset($view->result[$index]);
        }
      }
    }
  }
}

/**
 * Set Bookshelf Remove Field.
 *
 * @param object $view
 */
function _nnels_views_custom_handlers_set_bookshelf_remove_field(&$view) {
  foreach ($view->result as $result) {
    if (isset($view->field['nid']) && isset($result->{$view->field['nid']->field_alias})) {
      $flag = flag_get_flag('bookshelf');
      $flag->unflag_short = 'Remove';
      $result->bookshelf_remove = flag_create_link('bookshelf', $result->{$view->field['nid']->field_alias});
    }

    // The bookshelf_remove link is dependant on the nid field. If the nid
    // field is not present, display some warning text so the admin can fix it.
    else {
      $result->bookshelf_remove = "'Content: Nid' field is missing and is required!";
    }
  }
}

/**
 * Set Duplicate S3 Field.
 *
 * @param object $view
 */
function _nnels_views_custom_handlers_set_duplicate_s3_field(&$view) {
  foreach ($view->result as $result) {
    if (isset($view->field['nid']) && isset($result->{$view->field['nid']->field_alias})) {
      if (isset($view->field['field_s3_path']) && isset($result->{$view->field['field_s3_path']->field_alias})) {
        if (function_exists("_cals_get_node_with_duplicate_s3") ) {
          $result->duplicate_s3 = _cals_get_node_with_duplicate_s3($result);
        }
        else {
          // cals_file_authentication.module printPre() essentially.
          $result->duplicate_s3 = '<hr><blockquote>';
          $result->duplicate_s3 .= '<pre>';
          $result->duplicate_s3 .= print_r($result. TRUE);
          $result->duplicate_s3 .= '</pre>';
          $result->duplicate_s3 .= '</blockquote>';
        }
      }

      // The duplicate S3 message is dependant on the field_s3_path field. If
      // the field_s3_path field is not present, display some warning text so
      // the admin can fix it.
      else {
        $result->bookshelf_remove = "'Field: S3 Path' field is missing and is required!";
      }
    }

    // The duplicate S3 message is dependant on the nid field. If the nid
    // field is not present, display some warning text so the admin can fix it.
    else {
      $result->bookshelf_remove = "'Content: Nid' field is missing and is required!";
    }
  }
}

/**
 * Set File Size Warning Field.
 * 
 * @param object $view
 */
function _nnels_views_custom_handlers_set_file_size_warning_field(&$view) {
  foreach ($view->result as $result) {
    if (isset($view->field['filesize']) && isset($result->{$view->field['filesize']->field_alias})) {

      // If the filesize is greater than 400MB, show the file size warning.
      if ((int) $result->{$view->field['filesize']->field_alias} > 419430400) {
        $alt = t('Filesize Warning');
        $title = t('This file&apos;s size is larger than average on NNELS. Expect a longer download time than usual, depending on your connection.');
        $message = t('Long download time');
        $result->file_size_warning = '<div class="file-size-warning" alt="' . $alt . '" title="' . $title . '">';
        $result->file_size_warning .= '<i class="fa fa-exclamation-triangle" aria-hidden="true"> ' . $message . '</i>';
        $result->file_size_warning .= '</div>';
      }
    }

    // The file size warning is dependant on the filesize field. If the file-
    // size field is not present, display some warning text so the admin can
    // fix it.
    else {
      $result->file_size_warning = "'File: Size' field is missing and is required!";
    }
  }
}

/**
 * Set S3 Path Field.
 *
 * @param object $view
 */
function _nnels_views_custom_handlers_set_s3_path_field(&$view) {
  foreach ($view->result as $result) {
    if (isset($view->field['field_s3_path']) && isset($result->field_field_s3_path)) {
      $result->s3_path = str_replace(
        's3://download.nnels.ca',
        '',
        $result->field_field_s3_path[0]['raw']['safe_value']
      );
    }

    // The duplicate S3 message is dependant on the field_s3_path field. If
    // the field_s3_path field is not present, display some warning text so the
    // admin can fix it.
    else {
      $result->bookshelf_remove = "'Field: S3 Path' field is missing and is required!";
    }
  }
}
